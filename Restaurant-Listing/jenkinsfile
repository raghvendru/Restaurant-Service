pipeline {
  agent any

  environment {
    VERSION = "${env.BUILD_ID}"
  }

  tools {
    maven "Maven"
  }

  stages {

    stage('Maven Build') {
      steps {
        dir('Restaurant-Listing') {  // Navigate into the correct directory
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('Run Tests') {
      steps {
        dir('Restaurant-Listing') {  // Run tests inside correct directory
          sh 'mvn test'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('Restaurant-Listing') {
          sh '''
            mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar \
            -Dsonar.host.url=http://15.237.253.27:9000/ \
            -Dsonar.login=squ_39edca9a6f56db696affa006210a5f68a8f266d1
          '''
        }
      }
    }

    stage('Check code coverage') {
      steps {
        script {
          def token = "squ_39edca9a6f56db696affa006210a5f68a8f266d1"
          def sonarQubeUrl = "http://15.237.253.27:9000/api"
          def componentKey = "com.jagcoder:Restaurant-Listing"
          def coverageThreshold = 55.0

          def response = sh(
            script: "curl -s -H 'Authorization: Bearer ${token}' '${sonarQubeUrl}/measures/component?component=${componentKey}&metricKeys=coverage'",
            returnStdout: true
          ).trim()

          def coverage = sh(
            script: "echo '${response}' | jq -r '.component.measures[0].value'",
            returnStdout: true
          ).trim().toDouble()

          echo "Coverage: ${coverage}%"

          if (coverage < coverageThreshold) {
            error "Coverage is below the threshold of ${coverageThreshold}%. Aborting the pipeline."
          }
        }
      }
    }

    stage('Docker Build and Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'

          dir('Restaurant-Listing') {   // Ensure Dockerfile is in the correct directory
            sh 'docker build -t raghuuppar/restaurant-listing-server:${VERSION} .'
            sh 'docker push raghuuppar/restaurant-listing-server:${VERSION}'
          }
        }
      }
    }

    stage('Cleanup Workspace') {
      steps {
        cleanWs()
      }
    }

    stage('Update Image Tag in GitOps') {
      steps {
        checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-ssh', url: 'git@github.com:raghvendru/Restaurant-Service.git']])
        script {
          sh '''
            sed -i "s|image:.*|image: raghuuppar/restaurant-listing-server:${VERSION}|" aws/restaurant-manifest.yml
          '''
          sh 'git add .'
          sh 'git commit -m "Update image tag to ${VERSION}"'
          sshagent(['git-ssh']) {
            sh 'git push origin main'
          }
        }
      }
    }

  }
}
