pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS = credentials('DOCKER_HUB_CREDENTIALS')
    VERSION = "${env.BUILD_ID}"

  }

  tools {
    maven "Maven"
  }

  stages {

    stage('Maven Build'){
         steps {
                dir('Restaurant-Listing') {
                 sh 'mvn clean package -DskipTests'
                      }
                }
    }

     stage('Run Tests') {
                 steps {
                     dir('Restaurant-Listing') {
                         sh 'mvn test'
                     }
                 }
             }

    stage('SonarQube Analysis') {
  steps {
  dir('Restaurant-Listing') {
    sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar -Dsonar.host.url=http://15.237.253.27:9000/ -Dsonar.login=squ_cb46075e6c73822a511d21817fbcc767ca47bf5b'
  }
}
}


   stage('Check code coverage') {
            steps {
                script {
                    def token = "squ_cb46075e6c73822a511d21817fbcc767ca47bf5b"
                    def sonarQubeUrl = "http://15.237.253.27:9000/api"
                    def componentKey = "com.jagcoder:Restaurant-Listing"
                    def coverageThreshold = 55.0

                    def response = sh (
                        script: "curl -H 'Authorization: Bearer ${token}' '${sonarQubeUrl}/measures/component?component=${componentKey}&metricKeys=coverage'",
                        returnStdout: true
                    ).trim()

                    def coverage = sh (
                        script: "echo '${response}' | jq -r '.component.measures[0].value'",
                        returnStdout: true
                    ).trim().toDouble()

                    echo "Coverage: ${coverage}"

                    if (coverage < coverageThreshold) {
                        error "Coverage is below the threshold of ${coverageThreshold}%. Aborting the pipeline."
                    }
                }
            }
        }


      stage('Docker Build and Push') {
                 steps {
                     withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                         sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'

                         dir('Restaurant-Listing') {
                             sh 'docker build -t raghuuppar/restaurant-listing-server:${VERSION} .'
                             sh 'docker push raghuuppar/restaurant-listing-server:${VERSION}'
                         }
                     }
                 }
             }


     stage('Cleanup Workspace') {
      steps {
        deleteDir()

      }
    }



stage('Update Image Tag in GitOps') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
            sh '''
                # Configure Git
                git config --global user.email "raghavendruppar@gmail.com"
                git config --global user.name "raghavendru"

                # Clone using HTTPS with token
                git clone "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/raghvendru/Restaurant-Service.git"
                cd Restaurant-Service

                # Update manifest
                sed -i "s|image:.*|image: raghuuppar/restaurant-listing-server:${VERSION}|" deployment-folder/aws/restaurant-manifest.yml

                # Push changes
                git add deployment-folder/aws/restaurant-manifest.yml
                git commit -m "Update image tag for version ${VERSION}"
                git push origin main
            '''
        }
    }
}
  }

  }

